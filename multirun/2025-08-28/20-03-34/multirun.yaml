hydra:
  run:
    dir: results/${dataset.name}/${now:%Y-%m-%d_%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - hpt=my_sweep
  job:
    name: main
    chdir: null
    override_dirname: hpt=my_sweep
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.2'
    cwd: C:\Users\ryua0\CEBRAEMO
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: C:\Users\ryua0\CEBRAEMO\conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      hpt: my_sweep
      consistency_check: default
      cebra: offset1-model-mse
      embedding: bert
      dataset: dair-ai
      paths: default
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
paths:
  embedding_cache_dir: embedding_cache
  kaggle_data_dir: data/kaggle/hierarchical-text-classification
dataset:
  name: dair-ai
  source: hf
  hf_path: dair-ai/emotion
  text_column: text
  label_column: label
  label_map:
    0: sadness
    1: joy
    2: love
    3: anger
    4: fear
    5: surprise
  visualization:
    emotion_order:
    - sadness
    - joy
    - love
    - anger
    - fear
    - surprise
    emotion_colors:
      sadness: '#0000FF'
      joy: '#FFD700'
      love: '#FF69B4'
      anger: '#FF0000'
      fear: '#800080'
      surprise: '#00FFFF'
embedding:
  name: bert-base-uncased
  type: hf_transformer
  model_name: bert-base-uncased
  output_dim: 768
cebra:
  name: offset1-model-mse
  model_architecture: offset1-model-mse
  output_dim: 2
  max_iterations: 15000
  conditional: discrete
  num_workers: 2
  pin_memory: true
  persistent_workers: true
  prefetch_factor: 2
  params:
    batch_size: 512
    learning_rate: 0.0003
    temperature: 1.0
    distance: cosine
    loss: mse
    verbose: true
consistency_check:
  enabled: true
  num_runs: 5
hpt:
  hydra:
    sweeper:
      params:
        dataset: dair-ai,go_emotions
        embedding: bert,roberta,sentence_bert
        cebra: offset1-model-mse,offset1-model-v4,supervised1-model
        cebra.output_dim: 2,3,4,5,6,7,8,9,10,11,12,13,14
        cebra.max_iterations: 15000
        cebra.params.batch_size: 512,1024
        cebra.params.learning_rate: 3e-4,1e-4
device: ${oc.env:DEVICE, cpu}
evaluation:
  test_size: 0.2
  random_state: 42
  knn_neighbors: 5
wandb:
  project: CEBRA_NLP_Experiment
  run_name: default_run
  entity: null
ddp:
  world_size: 1
  rank: 0
  local_rank: 0
